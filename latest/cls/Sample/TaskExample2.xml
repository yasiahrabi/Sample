<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2017.2 (Build 691U)" ts="2017-07-05 11:47:55">
<Class name="Sample.TaskExample2">
<Description>
Defining a task using output files

Perhaps you would like to generate a report to a file and email the file to a group of users
when it is completed.

In an end user scenario you could have them just define the recipient list and the output directory / filename
and the standard report goes out to the group on schedule.
</Description>
<Super>Sample.Task</Super>
<TimeChanged>64441,73928</TimeChanged>
<TimeCreated>60768,42872.455937</TimeCreated>

<Method name="OnTask">
<Description>
Your program logic can be here in the OnTask method or in another class or a routine
just be sure to return a status code from the OnTask method</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Write "<HTML><BODY>This text will go to the output file",!
	Write "This output file will be attached when an email is sent",!
	Write "</BODY></HTML>",!
	/// Returning a status other than OK will mark the task as Suspended and send an email 
	/// to a value defined in EmailOnError
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ScheduleOnceDaily">
<Description>
this will schedule a task to run Once every day at 10:30 am
this example does not take into account any task 'Settings'
In this example, if the task has not run within 18 hours and 30 minutes of the scheduled start it will
"Expire" and not run again until the next start time</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim task as %SYS.Task
	Set task=##Class(%SYS.Task).%New()
	Set task.Name=..%ClassName(1)
	Set task.TaskClass=..%ClassName(1)  // The name of the Task Class (where OnTask is)
	Set task.NameSpace=$zu(5)  // Where namespace the task will run in
	Set task.DailyFrequency=task.DailyFrequencyDisplayToLogical("Once")
	Set task.DailyStartTime=$zth("10:30")
	Set task.OpenOutputFile=1
	Set task.OutputDirectory="c:\temp\"
	Set task.OutputFilename="TaskExample2.html"
	Set task.EmailOutput=1
	Set task.OutputFileIsBinary=0
	Do task.EmailOnError.Insert("who@somecompany.com")
	Do task.EmailOnCompletion.Insert("who@somecompany.com")
	/// also available EmailOnCompletion and EmailOnExpiration
	Quit task.%Save()
]]></Implementation>
</Method>
</Class>
</Export>
